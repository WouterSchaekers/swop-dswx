#the idea to represent the approve diagnosis callback

= A hackish version of the observer pattern =

The idea is as follows there is a collection of requirements that have to be met, when they are met a callback has to be made. An example of when this can be used is a warehouse stock that automatically must notify the system when it has been updated.

{{
abstract class Requirement()
{
Requiree req;
public bool isMet();
public changedValue()
{
   req.notify();
}
public void setRequiree(Requiree req)
{
this.req=req;
}
public Requirement(Requiree req)
{
this.req = req;
req.addRequirement(this);
}
};
abstract class Requiree()
{
Requirement requirement;
public Requiree()
{
  CallBack callback;
  Collection<Requirement> reqs= new ArrayList<Requirement>();
  public Requiree(Callback call)
  {
   if(call=null)
     throw new Exception();
    this.callback=call;
   }
  public void addRequirement(Requirement R)
{
  reqs.add(R);
  R.setRequiree(this);// double binding blaah needs to be done properly
}
public void notify()
{
 for(Requirement R: reqs)
    {
     if(!R.isMet())
        return;
     }
 this.callback.execute();
}
}


}
}}


= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages