#The report of the meeting of March 6th 2012

= Domein model =

Het domein model is over het algemeen OK. Enkele dingen die ofwel beter moeten ofwel in het verslag zeker vermeld moeten worden:
  * We hebben slechts 1 warehouse per hospital, niet 1 warehouse per campus.
  * We hielden eerste en patientfile per campus bij. Het is beter dat er slechts 1 patient file per hospital wordt bijgehouden aangezien verschillende campussen toch aan de patient history van dezelfde patient moeten kunnen (verslag!)
  * Waarom pijltje van campus naar PF op domein model? (verslag & refac report!!)
  * Maak een pijltje die de preference van een Doctor voor een Campus uitdrukt op domein model.
  * Appointments naar campusniveau

= UML =
  * Warehouse moet in de grote UML geplaceerd worden.
  * de grote UML moet wat getrimd worden (de kleinere klasses moeten er niet bij; als bijv. bij overerving er 4 klasses zijn van dezelfde aard, is het voldoende om er slechts een op de UML te zetten en het aan de hand daarvan uit te leggen).
  * Een warehouse manager maken en een onderscheid maken tussen de manieren waarop items uit het warehouse verwijderd worden (vervallen of gereserveerd?)
  * In het verslag moet zeker staan waarom we getClass gebruiken en niet bijvoorbeeld een custom hashcode en equals-methode. Deze reden is: Met getClass is de identifier die je terugkrijgt een getClass-object dat in een bepaalde plaats van het geheugen opgeslagen wort. Duplicate keys zijn dus niet mogelijk aangezien er niet meer dan 1 type getClass-objecten in 1 geheugencel kunnen staan op het zelfde moment in de tijd. Ook is deze methode voldoende flexibel als oplossing van het gegeven probleem.
  * Voor het report van de deadline van over 2 dagen: Het is niet de bedoeling dat dit report 10pg+ is; best ook 1 SSD er bij in voegen.
  * Refactor MasterController naar een naam die iets meer informatief is. Qua valid access check methodes is ons huidig model OK.
  * HospitalState moet  refactored worden naar Hospital.
  * ScheduledTask en UnscheduledTask zijn 2 bijna parallelle hierarchieÃ«n. Dit moet op een betere manier kunnen
    * Geen onderverdeling maken vanaf Scheduled/Unscheduled. Een Task houdt een description bij die per task uniek is. Qua verantwoordelijkheid om van een UnscheduledTask een ScheduledTask te maken is het beter om iet te maken dat DEFENSIEF kijkt of een UnscheduledTask zichzelf al getransformeerd heeft. De description kan bij dat laatste doorgegeven worden.
  * ResourcePool in de description zetten
  * Requirement terugbrengen; wel onderscheid maken tussen resourcerequirements en requirements zoals diagnose.isApproved()...
  * examenvraag: Factory patroon om in de UI een lijstje te printen met alle available medicaltests is niet de "normale" oplossing. Welk design pattern is wel goed?
  * De builders voor machines zijn OK omdat alle machines dezelfde signatuur hebben (verslag!)
  * TaskManager een observer maken van TimeLord = OK.