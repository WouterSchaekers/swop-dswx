package warehouse;

import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import system.Campus;
import warehouse.item.ActivatedCarbonType;
import warehouse.item.AsprinType;
import warehouse.item.MealType;
import warehouse.item.MiscType;
import warehouse.item.SleepingTabletsType;
import warehouse.item.VitaminType;
import warehouse.item.WarehouseItemType;
import warehouse.orderstrat.GenericOrderStrategy;
import warehouse.orderstrat.PatientMealStrategy;
import warehouse.orderstrat.PlasterOrderStrategy;
import warehouse.stock.StockProvider;
import exceptions.InvalidWarehouseItemException;

public class NormalWarehouseBuilder
{
	public class warehouseset{
		public Warehouse warehouse;
		public StockProvider provider;
	}
	private Map<WarehouseItemType,Integer> g()
	{
		Map<WarehouseItemType, Integer> rv = new HashMap<WarehouseItemType, Integer>();
		rv.put(new AsprinType(), 10);
		return rv;
	}
	
	StockProvider provider;
	private Campus campus_;
	public NormalWarehouseBuilder(Campus c)
	{
		campus_=c;
	}
	public warehouseset create()
	{
		warehouseset  set= new warehouseset();
		Warehouse w = new Warehouse(campus_);
		for(Entry<WarehouseItemType, Integer> entry:g().entrySet())
			try {
				w.setMaxCount(entry.getKey(), entry.getValue());
			} catch (InvalidWarehouseItemException e) {
				throw new Error("Problem while building standard warehouse");
			}
		StockProvider prov = new StockProvider();
		addOderStrategies(w,prov);
		return set;
	}
	private void addOderStrategies(Warehouse w, StockProvider prov) {
		//XXX:check of dit een goei idee is :)
		w.addObserver(new GenericOrderStrategy(new AsprinType(), w, prov));
		w.addObserver(new GenericOrderStrategy(new ActivatedCarbonType(), w, prov));
		w.addObserver(new GenericOrderStrategy(new MiscType(), w, prov));
		w.addObserver(new GenericOrderStrategy(new SleepingTabletsType(), w, prov));
		w.addObserver(new GenericOrderStrategy(new VitaminType(), w, prov));
		w.addObserver(new PatientMealStrategy(new MealType(), w, prov));
		w.addObserver(new PlasterOrderStrategy(w,prov));
	}
}
