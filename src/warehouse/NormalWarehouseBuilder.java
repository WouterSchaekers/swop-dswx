package warehouse;

import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import system.Campus;
import warehouse.item.AsprinType;
import warehouse.item.MealType;
import warehouse.item.MedicationType;
import warehouse.item.WarehouseItemType;
import warehouse.orderstrat.MedicationOrderStrategy;
import warehouse.orderstrat.PatientMealStrategy;
import warehouse.orderstrat.PlasterOrderStrategy;
import warehouse.stock.StockProvider;
import exceptions.InvalidWarehouseItemException;

public class NormalWarehouseBuilder
{
	public class WarehouseSet
	{
		public Warehouse warehouse;
		public StockProvider provider;
	}

	private Map<WarehouseItemType, Integer> g() {
		Map<WarehouseItemType, Integer> rv = new HashMap<WarehouseItemType, Integer>();
		rv.put(new AsprinType(), 10);
		return rv;
	}

	StockProvider provider;
	private Campus campus_;

	public NormalWarehouseBuilder(Campus c) {
		campus_ = c;
	}

	public WarehouseSet create() {
		WarehouseSet set = new WarehouseSet();
		Warehouse w = new Warehouse(campus_);
		for (Entry<WarehouseItemType, Integer> entry : g().entrySet())
			try {
				w.setMaxCount(entry.getKey(), entry.getValue());
			} catch (InvalidWarehouseItemException e) {
				throw new Error("Problem while building standard warehouse");
			}
		StockProvider prov = new StockProvider();
		addOderStrategies(w, prov);
		return set;
	}

	private void addOderStrategies(Warehouse w, StockProvider prov) {
		// XXX:check of dit een goei idee is :)
		w.addObserver(new MedicationOrderStrategy((MedicationType)(new AsprinType()), w, prov));
		w.addObserver(new PatientMealStrategy(new MealType(), w, prov));
		w.addObserver(new PlasterOrderStrategy(w, prov));
	}
}
